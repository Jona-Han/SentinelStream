version: '3'
services:
  db:
    build:
      context: ./postgres
      dockerfile: db.Dockerfile
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: unless-stopped
    networks:
      - external

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - '1000:1000'
    networks:
      - external

  kafka:
    image: 'bitnami/kafka:3.7'
    ports:
      - '9092:9092'
    networks:
      - app-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CREATE_TOPICS='start_training_topic:1:1,start_build_topic:1:1'

  training:
    build:
      context: ./training
      dockerfile: training.Dockerfile
    networks:
      - app-network
      - external
    environment:
      - KAFKA_SERVERS=kafka
      - KAFKA_TOPIC=start_training_topic

  packager:
    build:
      context: ./packager
      dockerfile: packager.Dockerfile
    networks:
      - app-network
      - external
    environment:
      - KAFKA_SERVERS=kafka
      - KAFKA_TOPIC=start_build_topic

  data-ingestion:
    build:
      context: ./data_ingestion
      dockerfile: ingestion.Dockerfile
    networks:
      - app-network
      - external

  app-management:
    build:
      context: ./app_management
      dockerfile: management.Dockerfile
    networks:
      - app-network
      - external

networks:
  app-network:
  external:

volumes:
  pgdata:
